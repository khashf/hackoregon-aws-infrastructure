Description: >
    ECS Service - HackOregon Exemplar API
Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    # ConfigBucket:
    #     Description: The configuration bucket we want to use
    #     Type: String

    # DeployTarget:
    #     Description: Which environment (Valid Values - integration, production)
    #     Type: String

    # ProjSettingsDir:
    #     Description: the relative directory path where we keep the app config
    #     Type: String

    ProjectName:
        Description: ProjectName
        Type: String

    Debug:
        Description: Debug
        Type: String

    PostgresUser:
        Description: Postgres_User
        Type: String

    PostgresName:
        Description: Postgres_Name
        Type: String

    PostgresHost:
        Description: Postgres_Host
        Type: String

    PostgresPort:
        Description: Postgres_Port
        Type: String
    
    PostgresPassword:
        Description: Postgres_Password
        Type: String

    DjangoSecretKey:
        Description: Django_Secret_Key
        Type: String

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /exemplar*

Resources:

    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties:
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
                - ContainerName: "api"
                  ContainerPort: 8000
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: api-service
            ContainerDefinitions:
                - Name: api
                  Essential: true
                  Image: 940871073408.dkr.ecr.us-west-2.amazonaws.com/integration/api
                  Memory: 100
                  Environment:
                    #- Name: CONFIG_BUCKET
                    #  Value: !Ref ConfigBucket
                    #- Name: DEPLOY_TARGET
                    #  Value: !Ref DeployTarget
                    #- Name: PROJ_SETTINGS_DIR
                    #  Value: !Ref ProjSettingsDir
                    - Name: PROJECT_NAME
                      Value: !Ref ProjectName
                    - Name: DEBUG
                      Value: !Ref Debug
                    - Name: POSTGRES_USER
                      Value: !Ref PostgresUser
                    - Name: POSTGRES_NAME
                      Value: !Ref PostgresName
                    - Name: POSTGRES_HOST
                      Value: !Ref PostgresHost
                    - Name: POSTGRES_PORT
                      Value: !Ref PostgresPort
                    - Name: POSTGRES_PASSWORD
                      Value: !Ref PostgresPassword
                    - Name: DJANGO_SECRET_KEY
                      Value: !Ref DjangoSecretKey
                    # - PROJECT_NAME
                    # - DEBUG=False
                    # - POSTGRES_USER=${STAGING_POSTGRES_USER}
                    # - POSTGRES_NAME=${STAGING_POSTGRES_NAME}
                    # - POSTGRES_HOST=${STAGING_POSTGRES_HOST}
                    # - POSTGRES_PORT=${STAGING_POSTGRES_PORT}
                    # - POSTGRES_PASSWORD=${STAGING_POSTGRES_PASSWORD}
                    # - DJANGO_SECRET_KEY=${STAGING_DJANGO_SECRET_KEY} 
                  PortMappings:
                    - ContainerPort: 8000
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 45
            HealthCheckPath: /exemplar/
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 40
            HealthyThresholdCount: 4
            UnhealthyThresholdCount: 5

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 72 # incremented
            Conditions:
                - Field: path-pattern
                  Values:
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }
